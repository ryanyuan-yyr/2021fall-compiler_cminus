/**
 * @file complex_num_cal.cminus
 * @author Yurun Yuan PB19111692
 * @brief A complex number calculator. Used as a demo for cminusf compiler. 
 * @version 0.1
 * @date 2021-12-25
 * 
 */

struct complex_num
{
    float real;
    float imaginary;

    /**
     * @return Returns |z|^2 for a complex number z.
     */
    float modulus_sqare()
    {
        return (*this).real * (*this).real + (*this).imaginary * (*this).imaginary;
    }

    /**
     * @return For a complex number a + b*i, returns a - b*i. 
     */
    struct complex_num conjugate()
    {
        struct complex_num res;
        res.real = (*this).real;
        res.imaginary = 0.0 - (*this).imaginary;
        return res;
    }
    struct complex_num operator+(struct complex_num rhs)
    {
        struct complex_num res;
        res.real = (*this).real + rhs.real;
        res.imaginary = (*this).imaginary + rhs.imaginary;
        return res;
    }
    struct complex_num operator-(struct complex_num rhs)
    {
        struct complex_num res;
        res.real = (*this).real - rhs.real;
        res.imaginary = (*this).imaginary - rhs.imaginary;
        return res;
    }
    struct complex_num operator*(struct complex_num rhs)
    {
        struct complex_num res;
        res.real = (*this).real * rhs.real - (*this).imaginary * rhs.imaginary;
        res.imaginary = (*this).real * rhs.imaginary + (*this).imaginary * rhs.real;
        return res;
    }
    struct complex_num operator/(struct complex_num rhs)
    {
        struct complex_num res;
        float denominator = rhs.modulus_sqare();
        res = (*this) * rhs.conjugate();
        res.real = res.real / denominator;
        res.imaginary = res.imaginary / denominator;
        return res;
    }
};

template <typename T>
struct linked_list_node
{
    typename T elem;
    struct linked_list_node<typename T> *next;
};

template <typename T>
struct stack
{
    struct linked_list_node<typename T> *head;
    int element_size;
    int elem_num;
    void init(int size)
    {
        (*this).elem_num = 0;
    }
    void push(typename T elem)
    {
        struct linked_list_node<typename T> *new_node = reinterpret_cast<struct linked_list_node<typename T> *>(allocate(((*this).element_size + 7) / 8 + 8));
        (*new_node).elem = elem;
        (*new_node).next = (*this).head;
        (*this).head = new_node;
        (*this).elem_num = (*this).elem_num + 1;
    }
    typename T top()
    {
        return (*(*this).head).elem;
    }
    typename T pop()
    {
        (*this).elem_num = (*this).elem_num - 1;
        typename T res = (*this).top();
        struct linked_list_node<typename T> *remove_node = (*this).head;
        (*this).head = (*(*this).head).next;
        deallocate(reinterpret_cast<int *>(remove_node));
        return res;
    }
    void drop()
    {
        int size = (*this).elem_num;
        while (size > 0)
        {
            (*this).pop();
            size = size - 1;
        }
    }
};

int char_to_int(int c)
{
    if (c >= 48)
        if (c <= 57)
            return c - 48;
    return 0 - 1;
}

struct complex_num read_complex_num(int **iter_ptr)
{
    struct complex_num res;
    float num = 0;
    while (char_to_int(**iter_ptr) != 0 - 1)
    {
        num = num * 10 + char_to_int(**iter_ptr);
        *iter_ptr = *iter_ptr + 1;
    }
    if (**iter_ptr == 105) /* 'i' = 105 */
    {
        res.real = 0;
        res.imaginary = num;
        *iter_ptr = *iter_ptr + 1;
    }
    else
    {
        res.real = num;
        res.imaginary = 0;
    }
    return res;
}

void output_complex_num(struct complex_num num)
{
    print_float(num.real);
    print_char(32);
    print_float(num.imaginary);
    print_char(105);
    print_char(10);
}

struct complex_num plus(struct complex_num *lhs, struct complex_num *rhs) { return *lhs + *rhs; }
struct complex_num subtract(struct complex_num *lhs, struct complex_num *rhs) { return *lhs - *rhs; }
struct complex_num multiply(struct complex_num *lhs, struct complex_num *rhs) { return *lhs * *rhs; }
struct complex_num divide(struct complex_num *lhs, struct complex_num *rhs) { return *lhs / *rhs; }

struct complex_num (*function_table[64])(struct complex_num *, struct complex_num *);

int main()
{
    function_table[43] = plus;     /* '+' == 43 */
    function_table[45] = subtract; /* '-' == 45 */
    function_table[42] = multiply; /* '*' == 42 */
    function_table[47] = divide;   /* '/' == 47 */

    int terminator = 10; /* '\n' == 10 */
    int l_paren = 40;    /* '(' == 40 */
    int r_paren = 41;    /* ')' == 41 */
    int *cur_pos;
    int *input;
    input = reinterpret_cast<int *>(allocate(512 * 4));
    cur_pos = input;

    int cur_char;
    cur_char = input_char();
    while (cur_char != terminator)
    {
        *cur_pos = cur_char;
        cur_pos = cur_pos + 1;
        cur_char = input_char();
    }
    *cur_pos = terminator;

    cur_pos = input;
    struct stack<struct complex_num> operands;
    operands.init(8);
    struct stack<int> operators;
    operators.init(4);
    while (*cur_pos != terminator)
    {
        if (char_to_int(*cur_pos) != 0 - 1)
            operands.push(read_complex_num(&cur_pos));
        else if (*cur_pos == 105)
        {
            struct complex_num unit;
            unit.real = 0;
            unit.imaginary = 1;
            operands.push(unit);
            cur_pos = cur_pos + 1;
        }
        else if (*cur_pos == l_paren)
        {
            operators.push(*cur_pos);
            cur_pos = cur_pos + 1;
        }
        else if (*cur_pos == r_paren)
        {
            while (operators.elem_num * (operators.top() - l_paren) != 0)
            {
                struct complex_num rhs = operands.pop();
                struct complex_num lhs = operands.pop();
                operands.push(function_table[operators.pop()](&lhs, &rhs));
            }
            operators.pop();
            cur_pos = cur_pos + 1;
        }
        else if ((*cur_pos - 43) * (*cur_pos - 45) == 0)
        {
            while (operators.elem_num * (operators.top() - l_paren) != 0)
            {
                struct complex_num rhs = operands.pop();
                struct complex_num lhs = operands.pop();
                operands.push(function_table[operators.pop()](&lhs, &rhs));
            }
            operators.push(*cur_pos);
            cur_pos = cur_pos + 1;
        }
        else if ((*cur_pos - 42) * (*cur_pos - 47) == 0)
        {
            int loop_cond = 0;
            if (operators.elem_num != 0)
                if ((operators.top() - 42) * (operators.top() - 47) == 0)
                    loop_cond = 1;
            while (loop_cond == 1)
            {
                struct complex_num rhs = operands.pop();
                struct complex_num lhs = operands.pop();
                operands.push(function_table[operators.pop()](&lhs, &rhs));
                loop_cond = 0;
                if (operators.elem_num != 0)
                    if ((operators.top() - 42) * (operators.top() - 47) == 0)
                        loop_cond = 1;
            }
            operators.push(*cur_pos);
            cur_pos = cur_pos + 1;
        }
        else
            return 0 - 1;
    }
    while (operators.elem_num != 0)
    {
        struct complex_num rhs = operands.pop();
        struct complex_num lhs = operands.pop();
        operands.push(function_table[operators.pop()](&lhs, &rhs));
    }
    if (operands.elem_num != 1)
        return 0 - 1;
    if (operators.elem_num != 0)
        return 0 - 1;
    output_complex_num(operands.top());

    deallocate(reinterpret_cast<int *>(input));
    operands.drop();
    operators.drop();
    return 0;
}
